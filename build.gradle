plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id 'maven-publish'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = project.mod_version
group = project.maven_group

def full_name = archives_base_name + '-' + "Fabric" + '-' + minecraft_version

base {
    archivesName = full_name
}


fabricApi {
    configureDataGeneration {
        client = true
    }
}

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

shadowJar {
    configurations = [project.configurations.shade]
    exclude('org/objectweb/**')
}

remapJar {
    dependsOn(shadowJar)
    inputFile = shadowJar.archiveFile
}

repositories {
    mavenCentral()
    maven {
        url 'https://seventeen-artist-maven.pkg.coding.net/repository/arcartx/public/'
    }
    maven { url = "https://maven.blamejared.com/" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    compileOnly  'org.projectlombok:lombok:1.18.24'

    implementation 'priv.seventeen.artist.arcartx:ArcartX-Client:1.6.563'

    library "gg.moonflower:molang-compiler:3.1.1.19"
}



processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}


